name: "♻️,🏋 Helper Releaser"

on:
  workflow_call:
    inputs:
      pypi_dist_name:
        required: false
        type: string
        description: 'Name of the package to be uploaded to PyPI (i.e., pip-name), will use the repository name if not provided'
      publish_cycle:
        required: false
        type: string
        default: '1 days'
        description: 'Time interval for checking updates (e.g., 1 days, 2 hours), will use `1 days` if not provided'
      version:
        required: false
        type: string
        description: 'version of the PyPI package, will use `YYMMDD` format if not provided'
        
    secrets:
      PYPITOKEN:
        description: "PyPI uploader account token"
        required: true

jobs:
  check-updates:
    name: "🧐 Check recent updates"
    runs-on: ubuntu-latest
    outputs:
      recent: ${{ steps.get_recent.outputs.RECENT }}
    env:
      OS: linux
      PYTHON: "3.8"
    steps:
      - name: "🛍️ Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "🔬 Get pushes in the last cycle"
        id: get_recent
        run: |
          git --no-pager log --since='${{ inputs.publish_cycle }} ago' --oneline -- . ':^.github'
          echo ===
          echo "RECENT=$(git --no-pager log --since='${{ inputs.publish_cycle }} ago' --oneline -- . ':^.github' | wc -l)" >> $GITHUB_OUTPUT

  build-and-upload:
    name: "📦 Build a PyPI source distribution and upload to PyPI"
    needs: [check-updates]
    if: needs.check-updates.outputs.recent != '0'
    runs-on: ubuntu-latest
    env:
      OS: linux
      PYTHON: "3.8"
    steps:
      - name: "🏷 Prepare package metadata"
        run: |
          echo "VERSION=$(if [ ! -z "${{ inputs.version }}" ]; then echo ${{ inputs.version }}; else date +%y%m%d; fi)" >> $GITHUB_ENV
          echo "PACKAGE=$(if [ ! -z "${{ inputs.pypi_dist_name }}" ]; then echo ${{ inputs.version }}; else ${{ github.repository }} ; fi | tr '-' '_')" >> $GITHUB_ENV
      - name: "🛍️ Checkout repository"
        uses: actions/checkout@v4
      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON }}
      - name: "🏗️ Create tag and build sdist using the tag as version "
        run: |
          git tag ${{ env.VERSION }}
          python -m pip install --upgrade build
          python -m build
      - name: "🫙  Push newly created tag"
        run: |
          git config --local user.email "admin@clams.ai"
          git config --local user.name "clams-bot"
          git push origin ${{ env.VERSION }}
      - name: "☁️ Upload to PyPI"
        run: |
          python -m pip install --upgrade twine
          twine upload -u __token__ -p ${{ secrets.PYPITOKEN }} dist/${{ env.PACKAGE }}-${{ env.VERSION }}.tar.gz

